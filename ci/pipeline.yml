---
jobs:
- name: deploy-nfs-broker-development
  plan:
  - aggregate:
    - get: config
      trigger: true
    - get: release-src
      trigger: true
    - get: pipeline-tasks
  - task: ensure-database
    file: pipeline-tasks/ensure-service.yml
    params:
      CF_API_URL: {{cf-api-url-development}}
      CF_USERNAME: {{cf-username-development}}
      CF_PASSWORD: {{cf-password-development}}
      CF_ORGANIZATION: {{broker-organization-development}}
      CF_SPACE: {{broker-space-development}}
      SERVICE_NAME: aws-rds
      PLAN_NAME: shared-psql
      INSTANCE_NAME: nfs-volume
      TIMEOUT: 300
  - task: compile-broker
    file: config/ci/compile-broker.yml
  - put: broker-app-development
    params:
      path: compiled
      current_app_name: nfs-broker
      manifest: config/ci/manifest.yml
      environment_variables:
        USERNAME: {{development-auth-name}}
        PASSWORD: {{development-auth-pass}}
  - task: update-broker
    file: pipeline-tasks/register-service-broker.yml
    params:
      CF_API_URL: {{cf-api-url-development}}
      CF_USERNAME: {{cf-username-development}}
      CF_PASSWORD: {{cf-password-development}}
      CF_ORGANIZATION: {{cf-organization-development}}
      CF_SPACE: {{cf-space-development}}
      BROKER_NAME: nfs-broker
      AUTH_USER: {{development-auth-name}}
      AUTH_PASS: {{development-auth-pass}}
      SERVICES: nfs
      SERVICE_ORGANIZATION: {{service-organization-development}}
  on_success:
    put: slack
    params:
      text: |
        :white_check_mark: Successfully deployed nfsbroker on development
        <$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|View build details>
      channel: {{slack-channel}}
      username: {{slack-username}}
      icon_url: {{slack-icon-url}}
  on_failure:
    put: slack
    params:
      text: |
        :x: FAILED to deploy nfsbroker on development
        <$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|View build details>
      channel: {{slack-channel}}
      username: {{slack-username}}
      icon_url: {{slack-icon-url}}

- name: deploy-nfs-server-development
  serial: true
  plan:
  - aggregate:
    - get: pipeline-tasks
    - get: config
      trigger: true
    - get: nfs-volume-release
      trigger: true
    - get: common-development
      trigger: true
    - get: stemcell
      trigger: true
    - get: master-bosh-root-cert
  - put: nfs-server-development
    params: &nfs-server-params
      cert: master-bosh-root-cert/master-bosh.crt
      manifest: bosh/manifest.yml
      releases:
      - nfs-volume-release/*.tgz
      stemcells:
      - stemcell/*.tgz
      vars_files:
      - config/varsfiles/development.yml
      - common-development/nfs-development-decrypted.yml
  on_success:
    put: slack
    params:
      text: |
        :white_check_mark: Successfully deployed nfstestserver on development
        <$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|View build details>
      channel: {{slack-channel}}
      username: {{slack-username}}
      icon_url: {{slack-icon-url}}
  on_failure:
    put: slack
    params:
      text: |
        :x: FAILED to deploy nfstestserver on development
        <$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|View build details>
      channel: {{slack-channel}}
      username: {{slack-username}}
      icon_url: {{slack-icon-url}}

- name: test-development
  plan:
  - aggregate:
    - get: config
      passed: [deploy-nfs-broker-development, deploy-nfs-server-development]
      trigger: true
    - get: release-src
      passed: [deploy-nfs-broker-development]
      trigger: true
  - task: test
    file: config/ci/acceptance-test.yml
    params:
      CF_API_URL: {{cf-api-url-development}}
      CF_USERNAME: {{cf-username-development}}
      CF_PASSWORD: {{cf-password-development}}
      CF_ORGANIZATION: {{test-organization-development}}
      CF_SPACE: {{test-space-development}}
      SERVICE_NAME: nfs
      PLAN_NAME: Existing
      SHARE_ID: {{test-share-id-development}}

- name: deploy-nfs-broker-staging
  plan:
  - aggregate:
    - get: config
      trigger: true
    - get: release-src
      trigger: true
    - get: pipeline-tasks
  - task: ensure-database
    file: pipeline-tasks/ensure-service.yml
    params:
      CF_API_URL: {{cf-api-url-staging}}
      CF_USERNAME: {{cf-username-staging}}
      CF_PASSWORD: {{cf-password-staging}}
      CF_ORGANIZATION: {{broker-organization-staging}}
      CF_SPACE: {{broker-space-staging}}
      SERVICE_NAME: aws-rds
      PLAN_NAME: shared-psql
      INSTANCE_NAME: nfs-volume
      TIMEOUT: 300
  - task: compile-broker
    file: config/ci/compile-broker.yml
  - put: broker-app-staging
    params:
      path: compiled
      current_app_name: nfs-broker
      manifest: config/ci/manifest.yml
      environment_variables:
        USERNAME: {{staging-auth-name}}
        PASSWORD: {{staging-auth-pass}}
  - task: update-broker
    file: pipeline-tasks/register-service-broker.yml
    params:
      CF_API_URL: {{cf-api-url-staging}}
      CF_USERNAME: {{cf-username-staging}}
      CF_PASSWORD: {{cf-password-staging}}
      CF_ORGANIZATION: {{cf-organization-staging}}
      CF_SPACE: {{cf-space-staging}}
      BROKER_NAME: nfs-broker
      AUTH_USER: {{staging-auth-name}}
      AUTH_PASS: {{staging-auth-pass}}
      SERVICES: nfs
      SERVICE_ORGANIZATION: {{service-organization-staging}}
  on_success:
    put: slack
    params:
      text: |
        :white_check_mark: Successfully deployed nfsbroker on staging
        <$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|View build details>
      channel: {{slack-channel}}
      username: {{slack-username}}
      icon_url: {{slack-icon-url}}
  on_failure:
    put: slack
    params:
      text: |
        :x: FAILED to deploy nfsbroker on staging
        <$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|View build details>
      channel: {{slack-channel}}
      username: {{slack-username}}
      icon_url: {{slack-icon-url}}

- name: deploy-nfs-server-staging
  serial: true
  plan:
  - aggregate:
    - get: pipeline-tasks
    - get: config
      trigger: true
    - get: nfs-volume-release
      trigger: true
    - get: common-staging
      trigger: true
    - get: stemcell
      trigger: true
    - get: master-bosh-root-cert
  - put: nfs-server-staging
    params: 
      <<: *nfs-server-params
      vars_files:
      - config/bosh/varsfiles/staging.yml
      - common-development/nfs-staging-decrypted.yml
  on_success:
    put: slack
    params:
      text: |
        :white_check_mark: Successfully deployed nfstestserver on staging
        <$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|View build details>
      channel: {{slack-channel}}
      username: {{slack-username}}
      icon_url: {{slack-icon-url}}
  on_failure:
    put: slack
    params:
      text: |
        :x: FAILED to deploy nfstestserver on staging
        <$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|View build details>
      channel: {{slack-channel}}
      username: {{slack-username}}
      icon_url: {{slack-icon-url}}

- name: test-staging
  plan:
  - aggregate:
    - get: config
      passed: [deploy-nfs-broker-staging, deploy-nfs-server-staging]
      trigger: true
    - get: release-src
      passed: [deploy-nfs-broker-staging]
      trigger: true
    - get: nfs-volume-release
      passed: [deploy-nfs-server-staging]
    - get: stemcell
      passed: [deploy-nfs-server-staging]
  - task: test
    file: config/ci/acceptance-test.yml
    params:
      CF_API_URL: {{cf-api-url-staging}}
      CF_USERNAME: {{cf-username-staging}}
      CF_PASSWORD: {{cf-password-staging}}
      CF_ORGANIZATION: {{test-organization-staging}}
      CF_SPACE: {{test-space-staging}}
      SERVICE_NAME: nfs
      PLAN_NAME: Existing
      SHARE_ID: {{test-share-id-staging}}

- name: deploy-nfs-broker-production
  plan:
  - aggregate:
    - get: config
      trigger: true
      passed: [test-staging]
    - get: release-src
      passed: [test-staging]
      trigger: true
    - get: pipeline-tasks
  - task: ensure-database
    file: pipeline-tasks/ensure-service.yml
    params:
      CF_API_URL: {{cf-api-url-production}}
      CF_USERNAME: {{cf-username-production}}
      CF_PASSWORD: {{cf-password-production}}
      CF_ORGANIZATION: {{broker-organization-production}}
      CF_SPACE: {{broker-space-production}}
      SERVICE_NAME: aws-rds
      PLAN_NAME: shared-psql
      INSTANCE_NAME: nfs-volume
      TIMEOUT: 300
  - task: compile-broker
    file: config/ci/compile-broker.yml
  - put: broker-app-production
    params:
      path: compiled
      current_app_name: nfs-broker
      manifest: config/ci/manifest.yml
      environment_variables:
        USERNAME: {{production-auth-name}}
        PASSWORD: {{production-auth-pass}}
  - task: update-broker
    file: pipeline-tasks/register-service-broker.yml
    params:
      CF_API_URL: {{cf-api-url-production}}
      CF_USERNAME: {{cf-username-production}}
      CF_PASSWORD: {{cf-password-production}}
      CF_ORGANIZATION: {{cf-organization-production}}
      CF_SPACE: {{cf-space-production}}
      BROKER_NAME: nfs-broker
      AUTH_USER: {{production-auth-name}}
      AUTH_PASS: {{production-auth-pass}}
      SERVICES: nfs
      SERVICE_ORGANIZATION: {{service-organization-production}}
  on_success:
    put: slack
    params:
      text: |
        :white_check_mark: Successfully deployed nfsbroker on production
        <$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|View build details>
      channel: {{slack-channel}}
      username: {{slack-username}}
      icon_url: {{slack-icon-url}}
  on_failure:
    put: slack
    params:
      text: |
        :x: FAILED to deploy nfsbroker on production
        <$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|View build details>
      channel: {{slack-channel}}
      username: {{slack-username}}
      icon_url: {{slack-icon-url}}

- name: deploy-nfs-server-production
  serial: true
  plan:
  - aggregate:
    - get: pipeline-tasks
    - get: config
      passed: [test-staging]
      trigger: true
    - get: nfs-volume-release
      passed: [test-staging]
      trigger: true
    - get: common-production
      trigger: true
    - get: stemcell
      passed: [test-staging]
      trigger: true
    - get: master-bosh-root-cert
  - put: nfs-server-production
    params:
      <<: *nfs-server-params
      vars_files:
      - config/bosh/varsfiles/production.yml
      - common-development/nfs-production-decrypted.yml
  on_success:
    put: slack
    params:
      text: |
        :white_check_mark: Successfully deployed nfstestserver on production
        <$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|View build details>
      channel: {{slack-channel}}
      username: {{slack-username}}
      icon_url: {{slack-icon-url}}
  on_failure:
    put: slack
    params:
      text: |
        :x: FAILED to deploy nfstestserver on production
        <$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|View build details>
      channel: {{slack-channel}}
      username: {{slack-username}}
      icon_url: {{slack-icon-url}}

- name: test-production
  plan:
  - aggregate:
    - get: config
      passed: [deploy-nfs-broker-production, deploy-nfs-server-production]
      trigger: true
    - get: release-src
      passed: [deploy-nfs-broker-production]
      trigger: true
  - task: test
    file: config/ci/acceptance-test.yml
    params:
      CF_API_URL: {{cf-api-url-production}}
      CF_USERNAME: {{cf-username-production}}
      CF_PASSWORD: {{cf-password-production}}
      CF_ORGANIZATION: {{test-organization-production}}
      CF_SPACE: {{test-space-production}}
      SERVICE_NAME: nfs
      PLAN_NAME: Existing
      SHARE_ID: {{test-share-id-production}}

resources:
- name: config
  type: git
  source:
    uri: {{config-git-url}}
    branch: {{config-git-branch}}

- name: pipeline-tasks
  type: git
  source:
    uri: {{pipeline-tasks-git-url}}
    branch: {{pipeline-tasks-git-branch}}

- name: release-src
  type: git
  source:
    uri: {{release-git-url}}
    branch: {{release-git-branch}}

- name: broker-app-development
  type: cf
  source:
    api: {{cf-api-url-development}}
    username: {{cf-username-development}}
    password: {{cf-password-development}}
    organization: {{cf-organization-development}}
    space: {{cf-space-development}}

- name: broker-app-staging
  type: cf
  source:
    api: {{cf-api-url-staging}}
    username: {{cf-username-staging}}
    password: {{cf-password-staging}}
    organization: {{cf-organization-staging}}
    space: {{cf-space-staging}}

- name: broker-app-production
  type: cf
  source:
    api: {{cf-api-url-production}}
    username: {{cf-username-production}}
    password: {{cf-password-production}}
    organization: {{cf-organization-production}}
    space: {{cf-space-production}}

- name: master-bosh-root-cert
  type: s3-iam
  source:
    bucket: {{private-bucket-production}}
    region_name: {{aws-region}}
    versioned_file: master-bosh.crt

- name: common-development
  type: s3-iam
  source:
    bucket_name: {{private-bucket-development}}
    secrets_file: nfs-development-decrypted.yml
    region: {{aws-region}}

- name: common-staging
  type: s3-iam
  source:
    bucket_name: {{private-bucket-staging}}
    secrets_file: nfs-staging-decrypted.yml
    region: {{aws-region}}

- name: common-production
  type: s3-iam
  source:
    bucket_name: {{private-bucket-production}}
    secrets_file: nfs-production-decrypted.yml
    region: {{aws-region}}

- name: nfs-volume-release
  type: s3-iam
  source:
    regexp: nfs-volume-(.*).tgz
    bucket: {{bosh-releases-bucket}}
    region_name: {{aws-region}}

- name: stemcell
  type: bosh-io-stemcell
  source:
    name: bosh-aws-xen-hvm-ubuntu-trusty-go_agent

- name: nfs-server-development
  type: bosh-deployment
  source:
    target: ((bosh-target-development))
    client: ((bosh-client-development))
    client_secret: ((bosh-client-secret-development))
    ca_cert: ((bosh-ca-cert))
    deployment: nfs-volume

- name: nfs-server-staging
  type: bosh-deployment
  source:
    target: ((bosh-target-staging))
    client: ((bosh-client-staging))
    client_secret: ((bosh-client-secret-staging))
    ca_cert: ((bosh-ca-cert))
    deployment: nfs-volume

- name: nfs-server-production
  type: bosh-deployment
  source:
    target: ((bosh-target-production))
    client: ((bosh-client-production))
    client_secret: ((bosh-client-secret-production))
    ca_cert: ((bosh-ca-cert))
    deployment: nfs-volume

- name: slack
  type: slack-notification
  source:
    url: {{slack-webhook-url}}

resource_types:
- name: slack-notification
  type: docker-image
  source:
    repository: cfcommunity/slack-notification-resource

- name: s3-iam
  type: docker-image
  source:
    repository: 18fgsa/s3-resource

- name: bosh-deployment
  type: docker-image
  source:
    repository: cloudfoundry/bosh-deployment-resource

- name: cg-common
  type: docker-image
  source:
    repository: 18fgsa/cg-common-resource
